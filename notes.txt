# notes.txt

## URL Shortener üîó
### Mike Skott's solution to the [STORD URL Shortener Exercise](https://github.com/stordco/url-shortener)

### ‚ö†Ô∏è Assumptions

- Host machine uses [Ruby Version Manager (RVM)](https://rvm.io/) to set Ruby to 2.3.1
- Bundler **may** do the same thing by reading the version from the `Gemfile`
- It is OK to use the first 7 digits of an MD5 hash of the full URL as the short_code (This seems reasonable to me as I understand that the probability of two unequal URLs' MD5 hashes matching even just the first seven digits would be **extremely** rare.)
- It is OK to let a user add the same URL twice. (PStore prevents the duplicate entry and the hash is the same, so the user need not know it is already in use.)

### üí≠ Thoughts

I started out building this in Rails, but quickly got frustrated with the bloat in 6.0, especially for such a small app. I made a pivot to Sinatra and am definitely happy with the choice. I had not integrated RSpec with Sinatra before, so I spent more time than anticipated working to get the test suite running properly. I've **never** used a `Makefile` in a Ruby project before, so I'm hoping I got everything there correct for you to spool up the app!

For the front-end, I would have liked to implement a framework like VueJS. Again I felt even the simplest framework would be overkill for the exercise, so I ended up working in plain old vanilla JavaScript. I found a really nice regex for URL validation and left a comment in the script next to it.

I usually prefer SCSS, but it seemed like adding an asset pipeline to Sinatra would be excessive, so CSS it is. At least Sinatra integrates easily with HAML, and that actually makes things even smaller and simpler so I used that. (Check out the sick conditional in `layout.haml`!) I found a cool CSS gradient for the page background and left a comment in the stylesheet.

I very much enjoyed coding this exercise and look forward to your questions and feedback.

ü•É Enjoy,
Mike
